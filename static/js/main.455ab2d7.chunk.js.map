{"version":3,"sources":["components/Edit.js","App.js","reportWebVitals.js","index.js"],"names":["Edit","useState","text","setText","localStorage","getItem","JSON","parse","store","setStore","toggle","setToggle","editItem","setEditItem","click","map","ele","id","name","allInputData","Date","getTime","toString","alert","useEffect","setItem","stringify","className","type","value","onChange","event","target","placeholder","onClick","newEditItems","find","console","log","editStore","index","updatestore","filter","deleteItem","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yMA8JeA,EA5IF,WAEb,MAAwBC,qBAAxB,mBAAOC,EAAP,KAAaC,EAAb,KAEA,EAA0BF,mBAjBbG,aAAaC,QAAQ,gBAElBC,KAAKC,MAAMH,aAAaC,QAAQ,iBAGjC,IAYf,mBAAOG,EAAP,KAAcC,EAAd,KAEA,EAA4BR,oBAAS,GAArC,mBAAOS,EAAP,KAAeC,EAAf,KAEA,EAAgCV,qBAAhC,mBAAOW,EAAP,KAAiBC,EAAjB,KAKUC,EAAM,WAER,GAAKZ,EAGA,GAAGA,IAASQ,EACZD,EACKD,EAAMO,KAAI,SAACC,GACP,OAAGA,EAAIC,KAAKL,EACR,2BAAUI,GAAV,IAAcE,KAAKhB,IAEhBc,MAGhBL,GAAU,GACVR,EAAQ,MACRU,EAAY,UAGb,CACA,IAAMM,EAAa,CAACF,IAAG,IAAIG,MAAOC,UAAUC,WAAWJ,KAAKhB,GAC3DO,EAAS,GAAD,mBAAKD,GAAL,CAAWW,KACpBhB,EAAQ,SAnBLoB,MAAM,mBAgFjB,OAjBDC,qBAAU,WACNpB,aAAaqB,QAAQ,eAAenB,KAAKoB,UAAUlB,MAEpD,CAACA,IAeC,qCACI,qBAAKmB,UAAU,sBAAf,SACG,2DAGH,sBAAKA,UAAU,YAAf,UACI,uBAAOC,KAAK,OAAQC,MAAO3B,EAAM4B,SA/DhC,SAACC,GACV5B,EAAQ4B,EAAMC,OAAOH,QA8DsCI,YAAY,gBAE3DvB,EAAO,wBAAQwB,QAASpB,EAAjB,eAAmC,wBAAQoB,QAASpB,EAAjB,qBAIlD,qBAAKa,UAAU,YAAf,SAGInB,EAAMO,KAAI,SAACC,GACP,OACA,mCACA,sBAAKW,UAAU,YAAf,UACI,6BAAKX,EAAIE,OACT,wBAAQgB,QAAS,kBA7DrB,SAACjB,GACb,IAAIkB,EAAa3B,EAAM4B,MAAK,SAACpB,GACzB,OAAOA,EAAIC,KAAOA,KAEtBoB,QAAQC,IAAIH,GAEZxB,GAAU,GACVR,EAAQgC,EAAajB,MACrBL,EAAYI,GAqDyBsB,CAAUvB,EAAIC,KAAnC,kBACA,wBAAQiB,QAAS,kBAvEpB,SAACM,GACd,IAAMC,EAAYjC,EAAMkC,QAAO,SAAC1B,GAC5B,OAAOwB,IAAUxB,EAAIC,MAEzBR,EAASgC,GAmE4BE,CAAW3B,EAAIC,KAApC,iBACA,yBAJ4BD,EAAIC,WAe5C,qBAAKU,UAAU,iBAAf,SACA,wBAAQO,QA3DE,WACVzB,EAAS,KA0DT,8BCxIGmC,MATf,WACE,OACE,mCAEE,cAAC,EAAD,OCISC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.455ab2d7.chunk.js","sourcesContent":["import React,{useState,useEffect} from 'react'\r\n\r\n\r\n////////////???????????--------GET DATA FROM LOCAL SSTORAGE------?????????///\r\nconst getLocalStorage=()=>{\r\n    let list=localStorage.getItem('local_memory');\r\n    if(list){\r\n        return  JSON.parse(localStorage.getItem('local_memory'));//////convert local storage into array\r\n    \r\n    }else{\r\n        return [];\r\n    }\r\n}\r\n\r\n\r\n\r\n//////////////////-------MAIN FNCTION STARTED------/////////\r\n\r\nconst Edit = () => {\r\n\r\nconst [text, setText] = useState();//hook to get the text\r\n\r\nconst [store, setStore] = useState(getLocalStorage())//hook to store the text\r\n\r\nconst [toggle, setToggle] = useState(true)\r\n\r\nconst [editItem, setEditItem] = useState()\r\n\r\n\r\n///////////////@@@@@@@@@@@@@@!!!!!!!!!!!!!!!------------------@@@@@@@@@@@@@@/!!!!!!!!!!!!????????\r\n\r\n    const click=()=>{//store item from  {text to store} using hooks in arr------------onClick handler\r\n       \r\n        if (!text){\r\n               alert(\"plz input data\")\r\n        }\r\n        else if(text && !toggle){\r\n             setStore(\r\n                  store.map((ele)=>{\r\n                      if(ele.id===editItem){\r\n                          return{...ele,name:text    }\r\n                      }\r\n                      return ele;\r\n                  })\r\n             )\r\n             setToggle(true);\r\n             setText(null);\r\n             setEditItem(null);;\r\n\r\n        }\r\n        else{\r\n            const allInputData={id:new Date().getTime().toString(),name:text}//??difference from home\r\n             setStore([...store,allInputData]);\r\n            setText(\"\")\r\n        }\r\n        \r\n///////////////////////////////////----------on change handler-------------/////////////////\r\n    }\r\n    const change=(event)=>{\r\n        setText(event.target.value);\r\n\r\n    }\r\n\r\n    ////@@@@@@@@@!!!!!!!!!!!!!!//delete item one by one///e////@@@@@@@@!!!!!!!!!!!!!\r\n         \r\n    const deleteItem=(index)=>{ \r\n        const updatestore=store.filter((ele)=>{\r\n            return index !== ele.id;\r\n        });\r\n        setStore(updatestore);\r\n    }\r\n\r\n    /////////////////@@@@@!!!!!!!!!!   edit store!!!!!!!!!!/////////////\r\n\r\n    const editStore=(id)=>{\r\n        let newEditItems=store.find((ele)=>{\r\n            return ele.id === id\r\n        });\r\n        console.log(newEditItems);\r\n        //get correct store to textarea\r\n        setToggle(false)\r\n        setText(newEditItems.name)\r\n        setEditItem(id)\r\n        //update the correct store\r\n\r\n\r\n    }\r\n\r\n/////////////////@@@@@!!!!!!!!!!   helps to delete stored aiem at once!!!!!!!!!!/////////////\r\n     //delete all\r\n     const remove_all=()=>{     \r\n            setStore([]) \r\n     }\r\n\r\n     ////////////////////@@@@@@@---------ADD DATA TO LOCAL STORAG-----?????????>???????//////\r\n\r\n\r\n   useEffect(() => {\r\n       localStorage.setItem('local_memory',JSON.stringify(store))\r\n      \r\n   }, [store])\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n     ///////////////@@@@@@@@@@ ---------------JSX START---------@@@@@@@@@!!!!!!!!!!/////////////\r\n    \r\n    return (\r\n        <>\r\n            <div className=\"container my-4 mb-3\">\r\n               <h1> To Do App for beginner</h1>\r\n            </div>\r\n\r\n            <div className=\"container\">\r\n                <input type=\"text\"  value={text} onChange={change} placeholder=\"input items\" />\r\n                {\r\n                    toggle?<button onClick={click}>+</button>:<button onClick={click} >edit</button>\r\n\r\n                }\r\n            </div >\r\n            <div className=\"container\">\r\n            \r\n            {\r\n                store.map((ele)=>{    \r\n                    return(\r\n                    <>\r\n                    <div className=\"container\" key={ele.id}>\r\n                        <h1>{ele.name}</h1>\r\n                        <button onClick={()=>editStore(ele.id)}  >edit</button>\r\n                        <button onClick={()=>deleteItem(ele.id)} >del</button>\r\n                        <hr/>\r\n                        </div>\r\n                        </>\r\n                    );\r\n                    \r\n\r\n                })\r\n            }\r\n\r\n\r\n            </div>\r\n            <div className=\"container my-4\">\r\n            <button onClick={remove_all} >remove all</button>\r\n\r\n            </div>\r\n        </>\r\n    )\r\n\r\n}\r\n\r\n\r\nexport default Edit;\r\n","import React from \"react\";\r\nimport Edit from \"./components/Edit\";\r\n// import Home from \"./components/Home\";\r\n\r\nfunction App() {\r\n  return (\r\n    <>\r\n      {/* <Home /> */}\r\n      <Edit />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}