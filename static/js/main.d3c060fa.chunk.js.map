{"version":3,"sources":["components/Home.js","App.js","reportWebVitals.js","index.js"],"names":["Home","useState","text","setText","localStorage","getItem","JSON","parse","store","setStore","useEffect","setItem","stringify","className","type","value","onChange","event","target","placeholder","onClick","map","ele","ind","id","updatestore","filter","deletestore","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kMAuHeA,EArGF,WAEb,MAAwBC,qBAAxB,mBAAOC,EAAP,KAAaC,EAAb,KAEA,EAA0BF,mBAjBbG,aAAaC,QAAQ,gBAElBC,KAAKC,MAAMH,aAAaC,QAAQ,iBAGjC,IAYf,mBAAOG,EAAP,KAAcC,EAAd,KA0DI,OAjBDC,qBAAU,WACNN,aAAaO,QAAQ,eAAeL,KAAKM,UAAUJ,MAEpD,CAACA,IAeC,qCACI,qBAAKK,UAAU,sBAAf,SACG,2DAGH,sBAAKA,UAAU,YAAf,UACI,uBAAOC,KAAK,OAAQC,MAAOb,EAAMc,SAjDhC,SAACC,GACVd,EAAQc,EAAMC,OAAOH,QAgDsCI,YAAY,gBAC/D,wBAAQC,QA7DR,WAEHlB,IAGAO,EAAS,GAAD,mBAAKD,GAAL,CAAWN,KACpBC,EAAQ,MAuDJ,kBAEJ,qBAAKU,UAAU,YAAf,SAGIL,EAAMa,KAAI,SAACC,EAAIC,GACX,OACA,qCACI,6BAAKD,IAEL,wBAAQF,QAAS,kBArDnB,SAACI,GACf,IAAMC,EAAYjB,EAAMkB,QAAO,SAACJ,EAAIC,GAChC,OAAOA,IAAQC,KAEnBf,EAASgB,GAiD4BE,CAAYJ,IAAjC,iBACA,+BAUZ,qBAAKV,UAAU,iBAAf,SACA,wBAAQO,QAzDE,WACVX,EAAS,KAwDT,8BCjGGmB,MATf,WACE,OACE,mCACE,cAAC,EAAD,OCKSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.d3c060fa.chunk.js","sourcesContent":["import React,{useState,useEffect} from 'react'\r\n\r\n\r\n////////////???????????--------GET DATA FROM LOCAL SSTORAGE------?????????///\r\nconst getLocalStorage=()=>{\r\n    let list=localStorage.getItem('local_memory');\r\n    if(list){\r\n        return  JSON.parse(localStorage.getItem('local_memory'));//////convert local storage into array\r\n    \r\n    }else{\r\n        return [];\r\n    }\r\n}\r\n\r\n\r\n\r\n//////////////////-------MAIN FNCTION STARTED------/////////\r\n\r\nconst Home = () => {\r\n\r\nconst [text, setText] = useState();\r\n// const [store, setStore] = useState([])---//before local storage used\r\nconst [store, setStore] = useState(getLocalStorage())//----afteer local storage is used\r\n\r\n\r\n///////////////@@@@@@@@@@@@@@!!!!!!!!!!!!!!!------------------@@@@@@@@@@@@@@/!!!!!!!!!!!!????????\r\n\r\n    const click=()=>{//store item from  {text to store} using hooks in arr\r\n       \r\n        if (!text){\r\n  \r\n        }else{\r\n             setStore([...store,text]);\r\n            setText(\"\")\r\n        }\r\n        \r\n///////////////////////////////////----------on change handler-------------/////////////////\r\n    }\r\n    const change=(event)=>{\r\n        setText(event.target.value);\r\n\r\n    }\r\n\r\n    ////@@@@@@@@@!!!!!!!!!!!!!!//delete item one by one///////@@@@@@@@!!!!!!!!!!!!!\r\n         \r\n    const deletestore=(id)=>{ \r\n        const updatestore=store.filter((ele,ind)=>{\r\n            return ind !== id;\r\n        });\r\n        setStore(updatestore);\r\n    }\r\n/////////////////@@@@@!!!!!!!!!!   helps to delete stored aiem at once!!!!!!!!!!/////////////\r\n     //delete all\r\n     const remove_all=()=>{     \r\n            setStore([]) \r\n     }\r\n\r\n\r\n\r\n\r\n     ////////////////////@@@@@@@---------ADD DATA TO LOCAL STORAG-----?????????>???????//////\r\n\r\n\r\n   useEffect(() => {\r\n       localStorage.setItem('local_memory',JSON.stringify(store))\r\n      \r\n   }, [store])\r\n\r\n     ///////////////@@@@@@@@@@ ---------------JSX START---------@@@@@@@@@!!!!!!!!!!/////////////\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n     \r\n    \r\n    return (\r\n        <>\r\n            <div className=\"container my-4 mb-3\">\r\n               <h1> To Do App for beginner</h1>\r\n            </div>\r\n\r\n            <div className=\"container\">\r\n                <input type=\"text\"  value={text} onChange={change} placeholder=\"input items\" />\r\n                <button onClick={click}>+</button>\r\n            </div >\r\n            <div className=\"container\">\r\n            \r\n            {\r\n                store.map((ele,ind)=>{\r\n                    return(\r\n                    <>\r\n                        <h1>{ele}</h1>\r\n                        \r\n                        <button onClick={()=>deletestore(ind)} >del</button>\r\n                        <hr/>\r\n                        </>\r\n                    );\r\n                    \r\n\r\n                })\r\n            }\r\n\r\n\r\n            </div>\r\n            <div className=\"container my-4\">\r\n            <button onClick={remove_all} >remove all</button>\r\n\r\n            </div>\r\n        </>\r\n    )\r\n\r\n}\r\n\r\n\r\nexport default Home;\r\n","import React from \"react\";\r\n// import Edit from './components/Edit';\r\nimport Home from \"./components/Home\";\r\n\r\nfunction App() {\r\n  return (\r\n    <>\r\n      <Home />\r\n      {/* <Edit/> */}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}